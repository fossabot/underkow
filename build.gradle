import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

import static java.time.ZoneOffset.UTC

buildscript {
    ext.v = [
            kotlin     : '1.3.10',
            kotlintest : '3.1.10',
            undertow   : '2.0.15.Final',
            slf4j      : '1.7.25',
            restassured: '3.2.0',
            mockk      : '1.8.13.kotlin13',
            coroutines : '1.0.1'
    ]
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.4.2'
    id 'org.jlleitschuh.gradle.ktlint' version '6.3.0'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.jetbrains.dokka' version '0.9.17'
    id 'signing'
}

repositories {
    jcenter()
}

dependencies {

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: v.kotlin
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: v.coroutines
    implementation group: 'io.undertow', name: 'undertow-core', version: v.undertow
    implementation group: 'org.slf4j', name: 'slf4j-api', version: v.slf4j

    testImplementation group: 'io.kotlintest', name: 'kotlintest-runner-junit5', version: v.kotlintest
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: v.slf4j
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: v.restassured
    testImplementation group: 'io.mockk', name: 'mockk', version: v.mockk
}

configurations.all {
    resolutionStrategy {

        failOnVersionConflict()

        force group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: v.kotlin
        force group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common', version: v.kotlin
        force group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: v.kotlin
        force group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: v.kotlin
        force group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    }
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.3"
        languageVersion = "1.3"
    }
}

compileTestKotlin {
    sourceCompatibility = compileKotlin.sourceCompatibility
    targetCompatibility = compileKotlin.targetCompatibility

    kotlinOptions {
        jvmTarget = compileKotlin.kotlinOptions.jvmTarget
        apiVersion = compileKotlin.kotlinOptions.apiVersion
        languageVersion = compileKotlin.kotlinOptions.languageVersion
    }
}

ktlint {
    coloredOutput = false
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

idea {
    module {
        downloadSources = true
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: org.gradle.jvm.tasks.Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: org.gradle.jvm.tasks.Jar) {
    classifier = 'javadoc'
    from dokka
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

group 'io.github.xstefanox'

if (hasProperty('project.version')) {
    version = findProperty('project.version')
} else {
    def now = OffsetDateTime.now(UTC)
    def formatter = DateTimeFormatter.ofPattern('uMMdd-HHmmss')
    version = formatter.format(now)
}
